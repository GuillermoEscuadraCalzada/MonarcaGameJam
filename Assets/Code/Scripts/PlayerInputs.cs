//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.5.1
//     from Assets/Inputs/New Controls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

namespace Inputs
{
    public partial class @PlayerInputs: IInputActionCollection2, IDisposable
    {
        public InputActionAsset asset { get; }
        public @PlayerInputs()
        {
            asset = InputActionAsset.FromJson(@"{
    ""name"": ""New Controls"",
    ""maps"": [
        {
            ""name"": ""MyActionMap"",
            ""id"": ""229fcd59-9748-4197-ba39-db9a26407a81"",
            ""actions"": [
                {
                    ""name"": ""LeftClick"",
                    ""type"": ""Value"",
                    ""id"": ""b0bb7114-d0eb-4c6e-b022-8daaaff88fb1"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""MouseAxis"",
                    ""type"": ""Value"",
                    ""id"": ""4a8dee9b-3aa5-4baa-87d1-6a0c5a9f7580"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""32d836f5-b2da-4b72-9638-ce15fd88de84"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Mouse"",
                    ""action"": ""LeftClick"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""d271b933-ae53-40e4-9dbb-e1c94b52c38b"",
                    ""path"": ""<Mouse>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Mouse"",
                    ""action"": ""MouseAxis"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""Mouse"",
            ""bindingGroup"": ""Mouse"",
            ""devices"": [
                {
                    ""devicePath"": ""<Mouse>"",
                    ""isOptional"": true,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
            // MyActionMap
            m_MyActionMap = asset.FindActionMap("MyActionMap", throwIfNotFound: true);
            m_MyActionMap_LeftClick = m_MyActionMap.FindAction("LeftClick", throwIfNotFound: true);
            m_MyActionMap_MouseAxis = m_MyActionMap.FindAction("MouseAxis", throwIfNotFound: true);
        }

        public void Dispose()
        {
            UnityEngine.Object.Destroy(asset);
        }

        public InputBinding? bindingMask
        {
            get => asset.bindingMask;
            set => asset.bindingMask = value;
        }

        public ReadOnlyArray<InputDevice>? devices
        {
            get => asset.devices;
            set => asset.devices = value;
        }

        public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

        public bool Contains(InputAction action)
        {
            return asset.Contains(action);
        }

        public IEnumerator<InputAction> GetEnumerator()
        {
            return asset.GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetEnumerator();
        }

        public void Enable()
        {
            asset.Enable();
        }

        public void Disable()
        {
            asset.Disable();
        }

        public IEnumerable<InputBinding> bindings => asset.bindings;

        public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
        {
            return asset.FindAction(actionNameOrId, throwIfNotFound);
        }

        public int FindBinding(InputBinding bindingMask, out InputAction action)
        {
            return asset.FindBinding(bindingMask, out action);
        }

        // MyActionMap
        private readonly InputActionMap m_MyActionMap;
        private List<IMyActionMapActions> m_MyActionMapActionsCallbackInterfaces = new List<IMyActionMapActions>();
        private readonly InputAction m_MyActionMap_LeftClick;
        private readonly InputAction m_MyActionMap_MouseAxis;
        public struct MyActionMapActions
        {
            private @PlayerInputs m_Wrapper;
            public MyActionMapActions(@PlayerInputs wrapper) { m_Wrapper = wrapper; }
            public InputAction @LeftClick => m_Wrapper.m_MyActionMap_LeftClick;
            public InputAction @MouseAxis => m_Wrapper.m_MyActionMap_MouseAxis;
            public InputActionMap Get() { return m_Wrapper.m_MyActionMap; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(MyActionMapActions set) { return set.Get(); }
            public void AddCallbacks(IMyActionMapActions instance)
            {
                if (instance == null || m_Wrapper.m_MyActionMapActionsCallbackInterfaces.Contains(instance)) return;
                m_Wrapper.m_MyActionMapActionsCallbackInterfaces.Add(instance);
                @LeftClick.started += instance.OnLeftClick;
                @LeftClick.performed += instance.OnLeftClick;
                @LeftClick.canceled += instance.OnLeftClick;
                @MouseAxis.started += instance.OnMouseAxis;
                @MouseAxis.performed += instance.OnMouseAxis;
                @MouseAxis.canceled += instance.OnMouseAxis;
            }

            private void UnregisterCallbacks(IMyActionMapActions instance)
            {
                @LeftClick.started -= instance.OnLeftClick;
                @LeftClick.performed -= instance.OnLeftClick;
                @LeftClick.canceled -= instance.OnLeftClick;
                @MouseAxis.started -= instance.OnMouseAxis;
                @MouseAxis.performed -= instance.OnMouseAxis;
                @MouseAxis.canceled -= instance.OnMouseAxis;
            }

            public void RemoveCallbacks(IMyActionMapActions instance)
            {
                if (m_Wrapper.m_MyActionMapActionsCallbackInterfaces.Remove(instance))
                    UnregisterCallbacks(instance);
            }

            public void SetCallbacks(IMyActionMapActions instance)
            {
                foreach (var item in m_Wrapper.m_MyActionMapActionsCallbackInterfaces)
                    UnregisterCallbacks(item);
                m_Wrapper.m_MyActionMapActionsCallbackInterfaces.Clear();
                AddCallbacks(instance);
            }
        }
        public MyActionMapActions @MyActionMap => new MyActionMapActions(this);
        private int m_MouseSchemeIndex = -1;
        public InputControlScheme MouseScheme
        {
            get
            {
                if (m_MouseSchemeIndex == -1) m_MouseSchemeIndex = asset.FindControlSchemeIndex("Mouse");
                return asset.controlSchemes[m_MouseSchemeIndex];
            }
        }
        public interface IMyActionMapActions
        {
            void OnLeftClick(InputAction.CallbackContext context);
            void OnMouseAxis(InputAction.CallbackContext context);
        }
    }
}
